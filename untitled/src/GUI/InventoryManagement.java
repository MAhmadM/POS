/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BusinessLayer.Category;
import BusinessLayer.Product;
import DAO.CategoryDAO;
import DAO.ProductDAO;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Ahmad Khakan
 */
public class InventoryManagement extends javax.swing.JFrame {
    Category category= new Category();
    List<Product> InventoryList;

    Product SelectedProduct;

    /**
     * Creates new form InventoryManagement
     */
    public InventoryManagement() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ProductTextField = new javax.swing.JTextField();
        QuantityTestField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InventoryTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        Code_idTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        PriceTextField = new javax.swing.JTextField();
        AddProductbtn = new javax.swing.JButton();
        Updatebtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        CategoryDropDown = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Deletebtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Inventory Management");

        jLabel2.setText("Product");

        ProductTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductTextFieldActionPerformed(evt);
            }
        });

        QuantityTestField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityTestFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Quantity");

        InventoryTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Code", "Name", "Quantity", "Price", "Description"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        InventoryList = getProductList();

        //InventoryList.remove(InventoryList.size()-1);

        DefaultTableModel model = (DefaultTableModel) InventoryTable.getModel();
        for (Product product : InventoryList)
        {
            Object[] row = {
                    product.getCode(),
                    product.getName(),
                    product.getStockQuantity(),
                    product.getPrice(),
                    product.getDescription()
            };
            model.addRow(row);
        }
        InventoryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = InventoryTable.getSelectedRow();
                    if (selectedRow != -1) {
                        //Selected Product from inventory
                        SelectedProduct = InventoryList.get(selectedRow);
                        SelectedProduct.display();

                        //Testfields Registeration
                        ProductTextField.setText(SelectedProduct.getName());
                        Code_idTextField.setText(SelectedProduct.getCode());
                        QuantityTestField.setText(String.valueOf(SelectedProduct.getStockQuantity()));
                        PriceTextField.setText(String.valueOf(SelectedProduct.getPrice()));
                        jTextArea1.setText(SelectedProduct.getDescription());
                        CategoryDropDown.setSelectedItem(SelectedProduct.getCategoryofProduct());

                        // Row is selected, do something with the selected row index
                        System.out.println("Selected Row Index: " + selectedRow);
                        String code = InventoryTable.getValueAt(selectedRow, 0).toString();
                        String name = InventoryTable.getValueAt(selectedRow, 1).toString();
                        System.out.println("Selected Row Data: Code=" + code + ", Name=" + name);
                    }
                }
            }
        });



        jScrollPane1.setViewportView(InventoryTable);

        jLabel4.setText("Code");

        Code_idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Code_idTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Existing Inventory");

        jLabel6.setText("Price");

        PriceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceTextFieldActionPerformed(evt);
            }
        });

        AddProductbtn.setText("Add New Product");
        AddProductbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProductbtnActionPerformed(evt);
            }
        });

        Updatebtn.setText("Update");
        Updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatebtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Category");


//
        List<String> categoriesList=new ArrayList<>();
        categoriesList.add("");
        categoriesList.addAll(category.getCategories());
        String[] categoriesArray = categoriesList.toArray(new String[0]);
        CategoryDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(categoriesArray));
        CategoryDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryDropDownActionPerformed(evt);
            }
        });

        jLabel8.setText("Description");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        Deletebtn.setBackground(new java.awt.Color(255, 51, 51));
        Deletebtn.setForeground(new java.awt.Color(255, 255, 255));
        Deletebtn.setText("Delete Product");
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(334, 334, 334)
                                .addComponent(jLabel5)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(BackBtn)
                                                .addGap(302, 302, 302)
                                                .addComponent(jLabel1))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(105, 105, 105)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(84, 84, 84)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane2)
                                                        .addComponent(CategoryDropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(PriceTextField)
                                                        .addComponent(QuantityTestField)
                                                        .addComponent(ProductTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(Code_idTextField))
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(179, 179, 179)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(Deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(Updatebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(AddProductbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(206, 206, 206))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(BackBtn))
                                .addGap(32, 32, 32)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(Code_idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4))
                                                .addGap(39, 39, 39)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(ProductTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(35, 35, 35)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(QuantityTestField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel3))
                                                .addGap(37, 37, 37)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(PriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel6))
                                                .addGap(38, 38, 38)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(CategoryDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel7))
                                                .addGap(41, 41, 41)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel8))
                                                .addGap(30, 30, 30)
                                                .addComponent(AddProductbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(Updatebtn, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(Deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1))
                                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>

    private void QuantityTestFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void PriceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void UpdatebtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if( !ProductTextField.getText().isEmpty() && !Code_idTextField.getText().isEmpty() &&  !PriceTextField.getText().isEmpty() && !QuantityTestField.getText().isEmpty() && !jTextArea1.getText().isEmpty() )
        {
            if (CategoryDropDown.getSelectedItem() != null && !CategoryDropDown.getSelectedItem().toString().equals(""))
            {
                //Breaking Comditions
                if(!Code_idTextField.getText().equals(SelectedProduct.getCode()))
                {
                    //Display Message ID cannot be Updated for a same product
                    System.out.println("Display Message ID cannot be Updated for a same product");
                    return;
                }

                Product Change = new Product();
                Change.setCode(Code_idTextField.getText());
                Change.setName(ProductTextField.getText());
                Change.setStockQuantity(Integer.parseInt(QuantityTestField.getText()));
                Change.setPrice(Double.parseDouble(PriceTextField.getText()));
                Change.setDescription(jTextArea1.getText());
                //Updating


                SelectedProduct.delete();
                Category Cat = new Category();
                Cat = Cat.getCategorybyName(CategoryDropDown.getSelectedItem().toString());
                Cat.add(Change);
                CategoryDAO DAO = new CategoryDAO();
                DAO.addanotherproduct(Change, Cat);

                updateData();
                UpdateField();
            }
            // else check to seleck a catagory

        }


    }


    private void AddProductbtnActionPerformed(java.awt.event.ActionEvent evt) {

        if(!ProductTextField.getText().isEmpty() && !Code_idTextField.getText().isEmpty() &&  !PriceTextField.getText().isEmpty() && !QuantityTestField.getText().isEmpty() && !jTextArea1.getText().isEmpty() ) {
            if (CategoryDropDown.getSelectedItem() != null && !CategoryDropDown.getSelectedItem().toString().equals("Null"))
            {
                try {
                    int quantity = Integer.parseInt(QuantityTestField.getText());
                    // Process the quantity as it's an integer
                } catch (NumberFormatException e) {
                    // Handle the case where the input is not an integer
                    DialogueBox.showMessageDialog("Please enter a valid integer quantity!");
                }
                try {
                    double price = Double.parseDouble(PriceTextField.getText());
                    // Process the price as it's a valid double value
                } catch (NumberFormatException e) {
                    // Handle the case where the input is not a valid double
                    DialogueBox.showMessageDialog("Please enter a valid price!");
                }

                System.out.println("HEllo");
                Product p = new Product();
                p.setCode(Code_idTextField.getText());
                p.setName(ProductTextField.getText());
                p.setStockQuantity(Integer.parseInt(QuantityTestField.getText()));
                p.setPrice(Double.parseDouble(PriceTextField.getText()));
                p.setDescription(jTextArea1.getText());

                Category Cat = new Category();
                Cat = Cat.getCategorybyName(CategoryDropDown.getSelectedItem().toString());
                Cat.add(p);
                CategoryDAO DAO = new CategoryDAO();
                DAO.addanotherproduct(p, Cat);

                //Displaying on the soame page
                //InventoryList.add(p);
                updateData();
                UpdateField();
            }
        }
        else {
            DialogueBox.showMessageDialog("Missing attributes is written");
        }
    }




    private void Code_idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

//        for(Product p : InventoryList)
//        {
//            if(Code_idTextField.getText().equals(p.getCode()))
//            {
//                System.out.println("This Item is Already Taken");
//            }
//        }
    }

    private void ProductTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void CategoryDropDownActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(SelectedProduct!=null) {
            SelectedProduct.delete();
            updateData();
            UpdateField();
//            InventoryList = getProductList();
//            DefaultTableModel model = (DefaultTableModel) InventoryTable.getModel();
//            model.setRowCount(0);
//            for (Product product : InventoryList) {
//                Object[] row = {
//                        product.getCode(),
//                        product.getName(),
//                        product.getStockQuantity(),
//                        product.getPrice(),
//                        product.getDescription()
//                };
//                model.addRow(row);
//            }
        }
//        if(!ProductTextField.getText().isEmpty() && !Code_idTextField.getText().isEmpty() &&  !PriceTextField.getText().isEmpty() && !QuantityTestField.getText().isEmpty() && !jTextArea1.getText().isEmpty() )
//        {
//            if (CategoryDropDown.getSelectedItem() != null && !CategoryDropDown.getSelectedItem().toString().equals("Null"))
//            {
//                System.out.println("HEllo");
//                Product p =  new Product();
//                p.setCode(Code_idTextField.getText());
//                p.setName(ProductTextField.getText());
//                p.setStockQuantity(Integer.parseInt(QuantityTestField.getText()));
//                p.setPrice(Integer.parseInt(PriceTextField.getText()));
//                p.setDescription(jTextArea1.getText());
//
//
//                Category Cat = new Category();
//                Cat = Cat.getCategorybyName(CategoryDropDown.getSelectedItem().toString());
//                Cat.add(p);
//                CategoryDAO DAO = new CategoryDAO();
//                DAO.addanotherproduct(p,Cat);
//
//                //Displaying on the soame page
//                InventoryList.add(p);
//                DefaultTableModel model = (DefaultTableModel) InventoryTable.getModel();
//                model.setRowCount(0);
//                for (Product product : InventoryList)
//                {
//                    Object[] row = {
//                            product.getCode(),
//                            product.getName(),
//                            product.getStockQuantity(),
//                            product.getPrice(),
//                            product.getDescription()
//                    };
//                    model.addRow(row);
//                }
//                ProductTextField.setText("");
//                Code_idTextField.setText("");
//                QuantityTestField.setText("");
//                PriceTextField.setText("");
//                jTextArea1.setText("");
//                CategoryDropDown.setSelectedItem("");
//                SelectedProduct=null;
//            }
//            // else check to seleck a catagory
//        }
//        //else where Dialoge Message of Missing attributes is written
        System.out.println("Button 1");
    }


    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        dispose();
        ManagerMenu managerMenu = new ManagerMenu();
        managerMenu.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton AddProductbtn;
    private javax.swing.JButton BackBtn;
    private javax.swing.JComboBox<String> CategoryDropDown;
    private javax.swing.JTextField Code_idTextField;
    private javax.swing.JTable InventoryTable;
    private javax.swing.JTextField PriceTextField;
    private javax.swing.JTextField ProductTextField;
    private javax.swing.JTextField QuantityTestField;
    private javax.swing.JButton Updatebtn;
    private javax.swing.JButton Deletebtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration

    private List<Product> getProductList() {
        ProductDAO productDAO = new ProductDAO();
        return productDAO.getAllProducts();
    }
    private  void UpdateField(){
        ProductTextField.setText("");
        Code_idTextField.setText("");
        QuantityTestField.setText("");
        PriceTextField.setText("");
        jTextArea1.setText("");
        CategoryDropDown.setSelectedItem("");
        SelectedProduct = null;
    }
    public void updateData(){
        InventoryList = getProductList();
        DefaultTableModel model = (DefaultTableModel) InventoryTable.getModel();
        model.setRowCount(0);
        for (Product product : InventoryList) {
            Object[] row = {
                    product.getCode(),
                    product.getName(),
                    product.getStockQuantity(),
                    product.getPrice(),
                    product.getDescription()
            };
            model.addRow(row);
        }
    }
}
